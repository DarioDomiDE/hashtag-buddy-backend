// <auto-generated />
using System;
using Instaq.Database.Storage.Mysql.Generated;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Instaq.Database.Migrations
{
    [DbContext(typeof(InstaqContext))]
    [Migration("20200428184723_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_bin");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnName("table")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "Name")
                        .HasName("PRIMARY");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.ToTable("blacklist");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FeedbackCount")
                        .HasColumnName("feedback_count")
                        .HasColumnType("int(11)");

                    b.Property<string>("Infos")
                        .IsRequired()
                        .HasColumnName("infos")
                        .HasColumnType("varchar(60)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PhotosCount")
                        .HasColumnName("photos_count")
                        .HasColumnType("int(11)");

                    b.Property<int>("SearchCount")
                        .HasColumnName("search_count")
                        .HasColumnType("int(11)");

                    b.HasKey("Id", "CustomerId")
                        .HasName("PRIMARY");

                    b.HasIndex("CustomerId")
                        .HasName("customer_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Itags", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_bin");

                    b.Property<bool>("OnBlacklist")
                        .HasColumnName("onBlacklist")
                        .HasColumnType("bit(1)");

                    b.Property<int>("Posts")
                        .HasColumnName("posts")
                        .HasColumnType("int(11)");

                    b.Property<int>("RefCount")
                        .HasColumnName("refCount")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.ToTable("itags");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Locations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("HasPublicPage")
                        .HasColumnName("has_public_page")
                        .HasColumnType("bit(1)");

                    b.Property<int>("InstaId")
                        .HasColumnName("insta_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("int(11)");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnName("lng")
                        .HasColumnType("varchar(11)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ProfilePicUrl")
                        .IsRequired()
                        .HasColumnName("profile_pic_url")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.LogsFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnName("customer_id")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("DebugId")
                        .HasColumnName("debug_id")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("feedbackCustomerId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.ToTable("logs_feedback");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.LogsHashtagSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnName("customer_id")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("hashtagSearchCustomerId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.ToTable("logs_hashtag_search");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.LogsUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnName("customer_id")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit(1)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("debugCustomerId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.ToTable("logs_upload");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Mtags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<bool>("OnBlacklist")
                        .HasColumnName("onBlacklist")
                        .HasColumnType("bit(1)");

                    b.Property<float>("Score")
                        .HasColumnName("score")
                        .HasColumnType("float(11,9)");

                    b.Property<string>("Shortcode")
                        .IsRequired()
                        .HasColumnName("shortcode")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnName("source")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id");

                    b.HasIndex("Name")
                        .HasName("name");

                    b.HasIndex("Shortcode")
                        .HasName("shortcode");

                    b.ToTable("mtags");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.PhotoItagRel", b =>
                {
                    b.Property<string>("Shortcode")
                        .HasColumnName("shortcode")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Itag")
                        .HasColumnName("itag")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_bin");

                    b.HasKey("Shortcode", "Itag")
                        .HasName("PRIMARY");

                    b.HasIndex("Itag")
                        .HasName("itagId");

                    b.HasIndex("Shortcode")
                        .HasName("shortcode");

                    b.ToTable("photo_itag_rel");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Photos", b =>
                {
                    b.Property<string>("Shortcode")
                        .HasColumnName("shortcode")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("created")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Follower")
                        .HasColumnName("follower")
                        .HasColumnType("int(11)");

                    b.Property<int>("Following")
                        .HasColumnName("following")
                        .HasColumnType("int(11)");

                    b.Property<string>("LargeUrl")
                        .IsRequired()
                        .HasColumnName("largeUrl")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Likes")
                        .HasColumnName("likes")
                        .HasColumnType("int(11)");

                    b.Property<long?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Posts")
                        .HasColumnName("posts")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ThumbUrl")
                        .IsRequired()
                        .HasColumnName("thumbUrl")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime?>("Uploaded")
                        .HasColumnName("uploaded")
                        .HasColumnType("timestamp");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnName("user")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Shortcode")
                        .HasName("PRIMARY");

                    b.HasIndex("Created")
                        .HasName("created");

                    b.HasIndex("LocationId")
                        .HasName("rel_photos_location");

                    b.HasIndex("Shortcode")
                        .IsUnique()
                        .HasName("imgId");

                    b.HasIndex("Status")
                        .HasName("status");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("Instaq.Database.Storage.Mysql.Generated.Photos", b =>
                {
                    b.HasOne("Instaq.Database.Storage.Mysql.Generated.Locations", "Location")
                        .WithMany("Photos")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("rel_photos_location");
                });
#pragma warning restore 612, 618
        }
    }
}
